import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import sqlite3
import re

conn = sqlite3.connect('reminders.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS reminders
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              user_id INTEGER,
              text TEXT,
              time TEXT)''')
conn.commit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/remind [—Ç–µ–∫—Å—Ç] [–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/remind —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É—à–∞—Ç—å 23.06.2025 15:30</code>",
        parse_mode="HTML"
    )

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        match = re.match(r'/remind\s+(.+?)\s+(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})', update.message.text)
        if not match:
            raise ValueError

        text = match.group(1)
        day, month, year, hour, minute = map(int, match.group(2, 3, 4, 5, 6))
        
        reminder_time = datetime(year, month, day, hour, minute)
        if reminder_time <= datetime.now():
            await update.message.reply_text("‚è≥ –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º!")
            return

        cursor.execute(
            "INSERT INTO reminders (user_id, text, time) VALUES (?, ?, ?)",
            (update.effective_user.id, text, reminder_time.isoformat())
        )
        conn.commit()

        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%d.%m.%Y %H:%M')}:\n"
            f"üìå {text}"
        )

        context.job_queue.run_once(
            callback=send_reminder,
            when=(reminder_time - datetime.now()).total_seconds(),
            data=(update.effective_user.id, text),
            name=str(cursor.lastrowid)
        )

    except Exception:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "<code>/remind —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É—à–∞—Ç—å 23.06.2025 15:30</code>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
            "- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–∞—Ç—ã\n"
            "- –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º",
            parse_mode="HTML"
        )

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    user_id, text = context.job.data
    await context.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

if __name__ == '__main__':
    application = ApplicationBuilder().token('your-token').build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remind", set_reminder))
    application.run_polling()
